
FreeRtos_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e9c  08003e9c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea4  08003ea4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000404c  20000014  08003ec0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004060  08003ec0  00024060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe51  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241c  00000000  00000000  0002fe95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e10  00000000  00000000  000322b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000220c8  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac96  00000000  00000000  00055e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf62e  00000000  00000000  00060b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013014c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000398c  00000000  00000000  001301c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e18 	.word	0x08003e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003e18 	.word	0x08003e18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000030 	.word	0x20000030
 8000500:	20000084 	.word	0x20000084

08000504 <liftPod>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void liftPod(uint32_t angle) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2);
 800050c:	4814      	ldr	r0, [pc, #80]	; (8000560 <liftPod+0x5c>)
 800050e:	f001 fb2c 	bl	8001b6a <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000512:	2100      	movs	r1, #0
 8000514:	4812      	ldr	r0, [pc, #72]	; (8000560 <liftPod+0x5c>)
 8000516:	f001 fba5 	bl	8001c64 <HAL_TIM_PWM_Start>
	volatile float additionAngle = ((float)1 / 180) * angle;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000524:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000564 <liftPod+0x60>
 8000528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800052c:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile uint32_t setTim = 20000 * (base + additionAngle);
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <liftPod+0x64>)
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 7a03 	vldr	s15, [r7, #12]
 800053a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800053e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800056c <liftPod+0x68>
 8000542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800054a:	ee17 3a90 	vmov	r3, s15
 800054e:	60bb      	str	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, setTim);
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <liftPod+0x5c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20003fdc 	.word	0x20003fdc
 8000564:	3bb60b61 	.word	0x3bb60b61
 8000568:	20000000 	.word	0x20000000
 800056c:	469c4000 	.word	0x469c4000

08000570 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == k0_Pin){
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b08      	cmp	r3, #8
 800057e:	d111      	bne.n	80005a4 <HAL_GPIO_EXTI_Callback+0x34>
		if(angle >= 20000) {
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000588:	4293      	cmp	r3, r2
 800058a:	d904      	bls.n	8000596 <HAL_GPIO_EXTI_Callback+0x26>
			angle = 20000;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 800058e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000592:	601a      	str	r2, [r3, #0]
			return;
 8000594:	e017      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x56>
		} else angle += 500;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e010      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x56>
	}
	else if(GPIO_Pin == k1_Pin){
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b10      	cmp	r3, #16
 80005a8:	d10d      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0x56>
		if(angle <= 0) {
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d103      	bne.n	80005ba <HAL_GPIO_EXTI_Callback+0x4a>
			angle = 0;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			return;
 80005b8:	e005      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0x56>
		} else angle -= 500;
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80005c2:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x60>)
 80005c4:	6013      	str	r3, [r2, #0]
	}
}
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	20000284 	.word	0x20000284

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb2b 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f833 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f911 	bl	8000808 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e6:	f000 f899 	bl	800071c <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMain, osPriorityNormal, 0, 128);
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0x64>)
 80005ec:	f107 041c 	add.w	r4, r7, #28
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f9d8 	bl	80029ba <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <main+0x68>)
 800060e:	601a      	str	r2, [r3, #0]

  /* definition and creation of liftPOD */
  osThreadDef(liftPOD, StartLiftPOD, osPriorityLow, 0, 128);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <main+0x6c>)
 8000612:	463c      	mov	r4, r7
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  liftPODHandle = osThreadCreate(osThread(liftPOD), NULL);
 8000622:	463b      	mov	r3, r7
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f9c7 	bl	80029ba <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x70>)
 8000630:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000632:	f002 f9bb 	bl	80029ac <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x62>
 8000638:	08003e3c 	.word	0x08003e3c
 800063c:	20003fd4 	.word	0x20003fd4
 8000640:	08003e60 	.word	0x08003e60
 8000644:	20003fd8 	.word	0x20003fd8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fbd6 	bl	8003e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	; 0xa8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fda1 	bl	8001214 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f954 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fffa 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f93d 	bl	8000984 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_TIM2_Init+0xe8>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000756:	2253      	movs	r2, #83	; 0x53
 8000758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_TIM2_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000762:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_TIM2_Init+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000776:	f001 f9cd 	bl	8001b14 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000780:	f000 f900 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	4619      	mov	r1, r3
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000792:	f001 fc73 	bl	800207c <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800079c:	f000 f8f2 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a0:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007a2:	f001 fa2a 	bl	8001bfa <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007ac:	f000 f8ea 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4619      	mov	r1, r3
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007c0:	f002 f84c 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ca:	f000 f8db 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007e6:	f001 fb83 	bl	8001ef0 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007f0:	f000 f8c8 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007f6:	f000 f919 	bl	8000a2c <HAL_TIM_MspPostInit>

}
 80007fa:	bf00      	nop
 80007fc:	3738      	adds	r7, #56	; 0x38
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20003fdc 	.word	0x20003fdc

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	4819      	ldr	r0, [pc, #100]	; (80008dc <MX_GPIO_Init+0xd4>)
 8000878:	f000 fc9a 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : k0_Pin k1_Pin */
  GPIO_InitStruct.Pin = k0_Pin|k1_Pin;
 800087c:	2318      	movs	r3, #24
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_GPIO_Init+0xd8>)
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0xdc>)
 8000890:	f000 faf4 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_GPIO_Init+0xd4>)
 80008ac:	f000 fae6 	bl	8000e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	2009      	movs	r0, #9
 80008b6:	f000 fab7 	bl	8000e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008ba:	2009      	movs	r0, #9
 80008bc:	f000 fad0 	bl	8000e60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2105      	movs	r1, #5
 80008c4:	200a      	movs	r0, #10
 80008c6:	f000 faaf 	bl	8000e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ca:	200a      	movs	r0, #10
 80008cc:	f000 fac8 	bl	8000e60 <HAL_NVIC_EnableIRQ>

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	10110000 	.word	0x10110000
 80008e4:	40021000 	.word	0x40021000

080008e8 <StartMain>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMain */
void StartMain(void const * argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <StartMain+0x2c>)
 80008f6:	f000 fc5b 	bl	80011b0 <HAL_GPIO_WritePin>
	  osDelay(100);
 80008fa:	2064      	movs	r0, #100	; 0x64
 80008fc:	f002 f8a9 	bl	8002a52 <osDelay>
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <StartMain+0x2c>)
 8000906:	f000 fc53 	bl	80011b0 <HAL_GPIO_WritePin>
	  osDelay(109);
 800090a:	206d      	movs	r0, #109	; 0x6d
 800090c:	f002 f8a1 	bl	8002a52 <osDelay>
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8000910:	e7ee      	b.n	80008f0 <StartMain+0x8>
 8000912:	bf00      	nop
 8000914:	40020000 	.word	0x40020000

08000918 <StartLiftPOD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLiftPOD */
void StartLiftPOD(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLiftPOD */
  /* Infinite loop */
  for(;;)
  {
	liftPod(0);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fdef 	bl	8000504 <liftPod>
	osDelay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092a:	f002 f892 	bl	8002a52 <osDelay>
	liftPod(90);
 800092e:	205a      	movs	r0, #90	; 0x5a
 8000930:	f7ff fde8 	bl	8000504 <liftPod>
	osDelay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f002 f88b 	bl	8002a52 <osDelay>
	liftPod(180);
 800093c:	20b4      	movs	r0, #180	; 0xb4
 800093e:	f7ff fde1 	bl	8000504 <liftPod>
	osDelay(1000);
 8000942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000946:	f002 f884 	bl	8002a52 <osDelay>
	liftPod(150);
 800094a:	2096      	movs	r0, #150	; 0x96
 800094c:	f7ff fdda 	bl	8000504 <liftPod>
	osDelay(1000);
 8000950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000954:	f002 f87d 	bl	8002a52 <osDelay>
	liftPod(60);
 8000958:	203c      	movs	r0, #60	; 0x3c
 800095a:	f7ff fdd3 	bl	8000504 <liftPod>
	liftPod(0);
 800095e:	e7df      	b.n	8000920 <StartLiftPOD+0x8>

08000960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d101      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000972:	f000 f981 	bl	8000c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40001400 	.word	0x40001400

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fa25 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d10d      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4c:	d11d      	bne.n	8000a8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a72:	2302      	movs	r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_TIM_MspPostInit+0x6c>)
 8000a86:	f000 f9f9 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2037      	movs	r0, #55	; 0x37
 8000ab2:	f000 f9b9 	bl	8000e28 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8000ab6:	2037      	movs	r0, #55	; 0x37
 8000ab8:	f000 f9d2 	bl	8000e60 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ac6:	f043 0320 	orr.w	r3, r3, #32
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad8:	f107 0210 	add.w	r2, r7, #16
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ffe4 	bl	8001ab0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae8:	f000 ffce 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8000aec:	4603      	mov	r3, r0
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <HAL_InitTick+0xa8>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3b01      	subs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_InitTick+0xac>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_InitTick+0xb0>)
 8000b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_InitTick+0xac>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_InitTick+0xac>)
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_InitTick+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_InitTick+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_InitTick+0xac>)
 8000b22:	f000 fff7 	bl	8001b14 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_InitTick+0xac>)
 8000b2e:	f001 f840 	bl	8001bb2 <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	2000401c 	.word	0x2000401c
 8000b4c:	40001400 	.word	0x40001400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f000 fb2b 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b96:	2010      	movs	r0, #16
 8000b98:	f000 fb24 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM7_IRQHandler+0x10>)
 8000ba6:	f001 f89b 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000401c 	.word	0x2000401c

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <SystemInit+0x28>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <SystemInit+0x28>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SystemInit+0x28>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000be4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000be6:	e003      	b.n	8000bf0 <LoopCopyDataInit>

08000be8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bee:	3104      	adds	r1, #4

08000bf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bf8:	d3f6      	bcc.n	8000be8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bfc:	e002      	b.n	8000c04 <LoopFillZerobss>

08000bfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c00:	f842 3b04 	str.w	r3, [r2], #4

08000c04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c08:	d3f9      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd3 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f003 f8d7 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fcdf 	bl	80005d4 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c1c:	08003eac 	.word	0x08003eac
  ldr  r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c24:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000c28:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000c2c:	20004060 	.word	0x20004060

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f8d8 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff1a 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe94 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	2000405c 	.word	0x2000405c

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000405c 	.word	0x2000405c

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e16b      	b.n	8001170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 815a 	bne.w	800116a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00b      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eca:	2b11      	cmp	r3, #17
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0xfc>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80b4 	beq.w	800116a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a5e      	ldr	r2, [pc, #376]	; (8001184 <HAL_GPIO_Init+0x308>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a5a      	ldr	r2, [pc, #360]	; (8001188 <HAL_GPIO_Init+0x30c>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a51      	ldr	r2, [pc, #324]	; (800118c <HAL_GPIO_Init+0x310>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d02b      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a50      	ldr	r2, [pc, #320]	; (8001190 <HAL_GPIO_Init+0x314>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x222>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x318>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x21e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x31c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x320>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x324>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_GPIO_Init+0x328>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4a      	ldr	r2, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x32c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x20a>
 8001082:	2307      	movs	r3, #7
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001086:	2308      	movs	r3, #8
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4934      	ldr	r1, [pc, #208]	; (8001188 <HAL_GPIO_Init+0x30c>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_GPIO_Init+0x330>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e6:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_GPIO_Init+0x330>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x330>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001110:	4a26      	ldr	r2, [pc, #152]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_GPIO_Init+0x330>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_GPIO_Init+0x330>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae90 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	3724      	adds	r7, #36	; 0x24
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40021400 	.word	0x40021400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40013c00 	.word	0x40013c00

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011cc:	e003      	b.n	80011d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f9b4 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e25b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d075      	beq.n	800131e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	4ba3      	ldr	r3, [pc, #652]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b04      	cmp	r3, #4
 800123c:	d00c      	beq.n	8001258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001246:	2b08      	cmp	r3, #8
 8001248:	d112      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4b9d      	ldr	r3, [pc, #628]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001256:	d10b      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d05b      	beq.n	800131c <HAL_RCC_OscConfig+0x108>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d157      	bne.n	800131c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e236      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d106      	bne.n	8001288 <HAL_RCC_OscConfig+0x74>
 800127a:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a87      	ldr	r2, [pc, #540]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 80012ac:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a83      	ldr	r2, [pc, #524]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a80      	ldr	r2, [pc, #512]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fce8 	bl	8000ca0 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fce4 	bl	8000ca0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1fb      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xc0>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcd4 	bl	8000ca0 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fcd0 	bl	8000ca0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1e7      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0xe8>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1bb      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4952      	ldr	r1, [pc, #328]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fc89 	bl	8000ca0 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fc85 	bl	8000ca0 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e19c      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4940      	ldr	r1, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc68 	bl	8000ca0 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc64 	bl	8000ca0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e17b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d030      	beq.n	8001460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d016      	beq.n	8001434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff fc48 	bl	8000ca0 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff fc44 	bl	8000ca0 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e15b      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x200>
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff fc31 	bl	8000ca0 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff fc2d 	bl	8000ca0 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e144      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d121      	bne.n	80014ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbf3 	bl	8000ca0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7ff fbe6 	bl	8000ca0 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0fd      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <HAL_RCC_OscConfig+0x4d4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x2f0>
 80014f6:	4b7d      	ldr	r3, [pc, #500]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a7c      	ldr	r2, [pc, #496]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 800150c:	4b77      	ldr	r3, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a76      	ldr	r2, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b74      	ldr	r3, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a73      	ldr	r2, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001526:	4b71      	ldr	r3, [pc, #452]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a70      	ldr	r2, [pc, #448]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b6e      	ldr	r3, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a6d      	ldr	r2, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff fbab 	bl	8000ca0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fba7 	bl	8000ca0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0bc      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x33a>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb95 	bl	8000ca0 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb91 	bl	8000ca0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0a6      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b52      	ldr	r3, [pc, #328]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8092 	beq.w	80016dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d05c      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d141      	bne.n	8001650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015cc:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb65 	bl	8000ca0 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fb61 	bl	8000ca0 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e078      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ec:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69da      	ldr	r2, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	019b      	lsls	r3, r3, #6
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	4933      	ldr	r1, [pc, #204]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fb3a 	bl	8000ca0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff fb36 	bl	8000ca0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e04d      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x41c>
 800164e:	e045      	b.n	80016dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_RCC_OscConfig+0x4dc>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb23 	bl	8000ca0 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb1f 	bl	8000ca0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e036      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x44a>
 800167c:	e02e      	b.n	80016dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e029      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_RCC_OscConfig+0x4d8>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	429a      	cmp	r2, r3
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d115      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b2:	4013      	ands	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470060 	.word	0x42470060

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa5c 	bl	8000ca0 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa58 	bl	8000ca0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4601      	mov	r1, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5cd3      	ldrb	r3, [r2, r3]
 800188e:	fa21 f303 	lsr.w	r3, r1, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f8fe 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08003e84 	.word	0x08003e84
 80018b8:	20000004 	.word	0x20000004
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d007      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x32>
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d008      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x38>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80b4 	bne.w	8001a54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018ee:	60bb      	str	r3, [r7, #8]
       break;
 80018f0:	e0b3      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018f2:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80018f4:	60bb      	str	r3, [r7, #8]
      break;
 80018f6:	e0b0      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001900:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001902:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d04a      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	099b      	lsrs	r3, r3, #6
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	f240 11ff 	movw	r1, #511	; 0x1ff
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	ea03 0501 	and.w	r5, r3, r1
 8001924:	ea04 0602 	and.w	r6, r4, r2
 8001928:	4629      	mov	r1, r5
 800192a:	4632      	mov	r2, r6
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	f04f 0400 	mov.w	r4, #0
 8001934:	0154      	lsls	r4, r2, #5
 8001936:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193a:	014b      	lsls	r3, r1, #5
 800193c:	4619      	mov	r1, r3
 800193e:	4622      	mov	r2, r4
 8001940:	1b49      	subs	r1, r1, r5
 8001942:	eb62 0206 	sbc.w	r2, r2, r6
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	0194      	lsls	r4, r2, #6
 8001950:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001954:	018b      	lsls	r3, r1, #6
 8001956:	1a5b      	subs	r3, r3, r1
 8001958:	eb64 0402 	sbc.w	r4, r4, r2
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	00e2      	lsls	r2, r4, #3
 8001966:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196a:	00d9      	lsls	r1, r3, #3
 800196c:	460b      	mov	r3, r1
 800196e:	4614      	mov	r4, r2
 8001970:	195b      	adds	r3, r3, r5
 8001972:	eb44 0406 	adc.w	r4, r4, r6
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	0262      	lsls	r2, r4, #9
 8001980:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001984:	0259      	lsls	r1, r3, #9
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	4618      	mov	r0, r3
 800198c:	4621      	mov	r1, r4
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f04f 0400 	mov.w	r4, #0
 8001994:	461a      	mov	r2, r3
 8001996:	4623      	mov	r3, r4
 8001998:	f7fe fc1a 	bl	80001d0 <__aeabi_uldivmod>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	e049      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	f04f 0400 	mov.w	r4, #0
 80019ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	ea03 0501 	and.w	r5, r3, r1
 80019ba:	ea04 0602 	and.w	r6, r4, r2
 80019be:	4629      	mov	r1, r5
 80019c0:	4632      	mov	r2, r6
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0154      	lsls	r4, r2, #5
 80019cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019d0:	014b      	lsls	r3, r1, #5
 80019d2:	4619      	mov	r1, r3
 80019d4:	4622      	mov	r2, r4
 80019d6:	1b49      	subs	r1, r1, r5
 80019d8:	eb62 0206 	sbc.w	r2, r2, r6
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0194      	lsls	r4, r2, #6
 80019e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	1a5b      	subs	r3, r3, r1
 80019ee:	eb64 0402 	sbc.w	r4, r4, r2
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	00e2      	lsls	r2, r4, #3
 80019fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a00:	00d9      	lsls	r1, r3, #3
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	195b      	adds	r3, r3, r5
 8001a08:	eb44 0406 	adc.w	r4, r4, r6
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	02a2      	lsls	r2, r4, #10
 8001a16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a1a:	0299      	lsls	r1, r3, #10
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	4621      	mov	r1, r4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	f7fe fbcf 	bl	80001d0 <__aeabi_uldivmod>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	60bb      	str	r3, [r7, #8]
      break;
 8001a52:	e002      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a56:	60bb      	str	r3, [r7, #8]
      break;
 8001a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08003e94 	.word	0x08003e94

08001ab0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	220f      	movs	r2, #15
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	08db      	lsrs	r3, r3, #3
 8001aea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCC_GetClockConfig+0x60>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01d      	b.n	8001b62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe ff56 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 fb72 	bl	800223c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	d007      	beq.n	8001b9c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d007      	beq.n	8001bec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e01d      	b.n	8001c48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f815 	bl	8001c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f000 faff 	bl	800223c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fdca 	bl	8002810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_TIM_PWM_Start+0x74>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_PWM_Start+0x2c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_TIM_PWM_Start+0x78>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_TIM_PWM_Start+0x30>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <HAL_TIM_PWM_Start+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d007      	beq.n	8001ccc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa6b 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa5d 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fa6e 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa41 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa33 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa44 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0208 	mvn.w	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fa17 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fa09 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa1a 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0210 	mvn.w	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9ed 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f9df 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f9f0 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0201 	mvn.w	r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fd7e 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fd6c 	bl	8002968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f9b5 	bl	8002226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fd36 	bl	8002954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e0b4      	b.n	8002074 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f200 809f 	bhi.w	8002060 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f5d 	.word	0x08001f5d
 8001f2c:	08002061 	.word	0x08002061
 8001f30:	08002061 	.word	0x08002061
 8001f34:	08002061 	.word	0x08002061
 8001f38:	08001f9d 	.word	0x08001f9d
 8001f3c:	08002061 	.word	0x08002061
 8001f40:	08002061 	.word	0x08002061
 8001f44:	08002061 	.word	0x08002061
 8001f48:	08001fdf 	.word	0x08001fdf
 8001f4c:	08002061 	.word	0x08002061
 8001f50:	08002061 	.word	0x08002061
 8001f54:	08002061 	.word	0x08002061
 8001f58:	0800201f 	.word	0x0800201f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fa0a 	bl	800237c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0208 	orr.w	r2, r2, #8
 8001f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6999      	ldr	r1, [r3, #24]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	619a      	str	r2, [r3, #24]
      break;
 8001f9a:	e062      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa5a 	bl	800245c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6999      	ldr	r1, [r3, #24]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	021a      	lsls	r2, r3, #8
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	619a      	str	r2, [r3, #24]
      break;
 8001fdc:	e041      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 faaf 	bl	8002548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0208 	orr.w	r2, r2, #8
 8001ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0204 	bic.w	r2, r2, #4
 8002008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69d9      	ldr	r1, [r3, #28]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	61da      	str	r2, [r3, #28]
      break;
 800201c:	e021      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fb03 	bl	8002630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69d9      	ldr	r1, [r3, #28]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	021a      	lsls	r2, r3, #8
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	61da      	str	r2, [r3, #28]
      break;
 800205e:	e000      	b.n	8002062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002060:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_TIM_ConfigClockSource+0x18>
 8002090:	2302      	movs	r3, #2
 8002092:	e0a6      	b.n	80021e2 <HAL_TIM_ConfigClockSource+0x166>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b40      	cmp	r3, #64	; 0x40
 80020ca:	d067      	beq.n	800219c <HAL_TIM_ConfigClockSource+0x120>
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d80b      	bhi.n	80020e8 <HAL_TIM_ConfigClockSource+0x6c>
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d073      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0x140>
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d802      	bhi.n	80020de <HAL_TIM_ConfigClockSource+0x62>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d06f      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020dc:	e078      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d06c      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0x140>
 80020e2:	2b30      	cmp	r3, #48	; 0x30
 80020e4:	d06a      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020e6:	e073      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020e8:	2b70      	cmp	r3, #112	; 0x70
 80020ea:	d00d      	beq.n	8002108 <HAL_TIM_ConfigClockSource+0x8c>
 80020ec:	2b70      	cmp	r3, #112	; 0x70
 80020ee:	d804      	bhi.n	80020fa <HAL_TIM_ConfigClockSource+0x7e>
 80020f0:	2b50      	cmp	r3, #80	; 0x50
 80020f2:	d033      	beq.n	800215c <HAL_TIM_ConfigClockSource+0xe0>
 80020f4:	2b60      	cmp	r3, #96	; 0x60
 80020f6:	d041      	beq.n	800217c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020f8:	e06a      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	d066      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x152>
 8002100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002104:	d017      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002106:	e063      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f000 fb5a 	bl	80027d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800212a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
      break;
 8002134:	e04c      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f000 fb43 	bl	80027d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002158:	609a      	str	r2, [r3, #8]
      break;
 800215a:	e039      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	461a      	mov	r2, r3
 800216a:	f000 fab7 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2150      	movs	r1, #80	; 0x50
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fb10 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 800217a:	e029      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	461a      	mov	r2, r3
 800218a:	f000 fad6 	bl	800273a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2160      	movs	r1, #96	; 0x60
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fb00 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 800219a:	e019      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f000 fa97 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 faf0 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80021ba:	e009      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 fae7 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80021cc:	e000      	b.n	80021d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a40      	ldr	r2, [pc, #256]	; (8002350 <TIM_Base_SetConfig+0x114>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d013      	beq.n	800227c <TIM_Base_SetConfig+0x40>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	d00f      	beq.n	800227c <TIM_Base_SetConfig+0x40>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <TIM_Base_SetConfig+0x118>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d00b      	beq.n	800227c <TIM_Base_SetConfig+0x40>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <TIM_Base_SetConfig+0x11c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d007      	beq.n	800227c <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <TIM_Base_SetConfig+0x120>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d003      	beq.n	800227c <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3a      	ldr	r2, [pc, #232]	; (8002360 <TIM_Base_SetConfig+0x124>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d108      	bne.n	800228e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <TIM_Base_SetConfig+0x114>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02b      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229c:	d027      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <TIM_Base_SetConfig+0x118>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d023      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <TIM_Base_SetConfig+0x11c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <TIM_Base_SetConfig+0x120>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01b      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a29      	ldr	r2, [pc, #164]	; (8002360 <TIM_Base_SetConfig+0x124>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d017      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a28      	ldr	r2, [pc, #160]	; (8002364 <TIM_Base_SetConfig+0x128>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <TIM_Base_SetConfig+0x12c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00f      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a26      	ldr	r2, [pc, #152]	; (800236c <TIM_Base_SetConfig+0x130>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00b      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <TIM_Base_SetConfig+0x134>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <TIM_Base_SetConfig+0x138>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <TIM_Base_SetConfig+0x13c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d108      	bne.n	8002300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <TIM_Base_SetConfig+0x114>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_Base_SetConfig+0xf8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <TIM_Base_SetConfig+0x124>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40010400 	.word	0x40010400
 8002364:	40014000 	.word	0x40014000
 8002368:	40014400 	.word	0x40014400
 800236c:	40014800 	.word	0x40014800
 8002370:	40001800 	.word	0x40001800
 8002374:	40001c00 	.word	0x40001c00
 8002378:	40002000 	.word	0x40002000

0800237c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f023 0302 	bic.w	r3, r3, #2
 80023c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <TIM_OC1_SetConfig+0xd8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_OC1_SetConfig+0x64>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <TIM_OC1_SetConfig+0xdc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10c      	bne.n	80023fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0308 	bic.w	r3, r3, #8
 80023e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <TIM_OC1_SetConfig+0xd8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_OC1_SetConfig+0x8e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <TIM_OC1_SetConfig+0xdc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d111      	bne.n	800242e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	621a      	str	r2, [r3, #32]
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40010000 	.word	0x40010000
 8002458:	40010400 	.word	0x40010400

0800245c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f023 0210 	bic.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800248a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0320 	bic.w	r3, r3, #32
 80024a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a22      	ldr	r2, [pc, #136]	; (8002540 <TIM_OC2_SetConfig+0xe4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_OC2_SetConfig+0x68>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <TIM_OC2_SetConfig+0xe8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10d      	bne.n	80024e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <TIM_OC2_SetConfig+0xe4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d003      	beq.n	80024f0 <TIM_OC2_SetConfig+0x94>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <TIM_OC2_SetConfig+0xe8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d113      	bne.n	8002518 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	621a      	str	r2, [r3, #32]
}
 8002532:	bf00      	nop
 8002534:	371c      	adds	r7, #28
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40010000 	.word	0x40010000
 8002544:	40010400 	.word	0x40010400

08002548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <TIM_OC3_SetConfig+0xe0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_OC3_SetConfig+0x66>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <TIM_OC3_SetConfig+0xe4>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10d      	bne.n	80025ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <TIM_OC3_SetConfig+0xe0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d003      	beq.n	80025da <TIM_OC3_SetConfig+0x92>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <TIM_OC3_SetConfig+0xe4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d113      	bne.n	8002602 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	621a      	str	r2, [r3, #32]
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40010000 	.word	0x40010000
 800262c:	40010400 	.word	0x40010400

08002630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	031b      	lsls	r3, r3, #12
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <TIM_OC4_SetConfig+0xa4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_OC4_SetConfig+0x68>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <TIM_OC4_SetConfig+0xa8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d109      	bne.n	80026ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800269e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	621a      	str	r2, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40010400 	.word	0x40010400

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 030a 	bic.w	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0210 	bic.w	r2, r3, #16
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	031b      	lsls	r3, r3, #12
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f043 0307 	orr.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2201      	movs	r2, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e05a      	b.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d01d      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10c      	bne.n	8002918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40010000 	.word	0x40010000
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800
 8002944:	40000c00 	.word	0x40000c00
 8002948:	40010400 	.word	0x40010400
 800294c:	40014000 	.word	0x40014000
 8002950:	40001800 	.word	0x40001800

08002954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800298a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800298e:	2b84      	cmp	r3, #132	; 0x84
 8002990:	d005      	beq.n	800299e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002992:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4413      	add	r3, r2
 800299a:	3303      	adds	r3, #3
 800299c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029b0:	f000 fada 	bl	8002f68 <vTaskStartScheduler>
  
  return osOK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	bd80      	pop	{r7, pc}

080029ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b089      	sub	sp, #36	; 0x24
 80029be:	af04      	add	r7, sp, #16
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <osThreadCreate+0x54>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01c      	beq.n	8002a0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685c      	ldr	r4, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681d      	ldr	r5, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691e      	ldr	r6, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ffc8 	bl	800297c <makeFreeRtosPriority>
 80029ec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029f6:	9202      	str	r2, [sp, #8]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	9100      	str	r1, [sp, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4632      	mov	r2, r6
 8002a00:	4629      	mov	r1, r5
 8002a02:	4620      	mov	r0, r4
 8002a04:	f000 f8ed 	bl	8002be2 <xTaskCreateStatic>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e01c      	b.n	8002a48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685c      	ldr	r4, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1a:	b29e      	uxth	r6, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ffaa 	bl	800297c <makeFreeRtosPriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	4632      	mov	r2, r6
 8002a36:	4629      	mov	r1, r5
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f000 f92c 	bl	8002c96 <xTaskCreate>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a48:	68fb      	ldr	r3, [r7, #12]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <osDelay+0x16>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	e000      	b.n	8002a6a <osDelay+0x18>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fa48 	bl	8002f00 <vTaskDelay>
  
  return osOK;
 8002a70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f103 0208 	add.w	r2, r3, #8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f103 0208 	add.w	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f103 0208 	add.w	r2, r3, #8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d103      	bne.n	8002b3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e00c      	b.n	8002b56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e002      	b.n	8002b4a <vListInsert+0x2e>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d2f6      	bcs.n	8002b44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6852      	ldr	r2, [r2, #4]
 8002bae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d103      	bne.n	8002bc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08e      	sub	sp, #56	; 0x38
 8002be6:	af04      	add	r7, sp, #16
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	e7fe      	b.n	8002c08 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <xTaskCreateStatic+0x42>
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e7fe      	b.n	8002c22 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c24:	2354      	movs	r3, #84	; 0x54
 8002c26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b54      	cmp	r3, #84	; 0x54
 8002c2c:	d009      	beq.n	8002c42 <xTaskCreateStatic+0x60>
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e7fe      	b.n	8002c40 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01e      	beq.n	8002c88 <xTaskCreateStatic+0xa6>
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c62:	2300      	movs	r3, #0
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f850 	bl	8002d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c82:	f000 f8d3 	bl	8002e2c <prvAddNewTaskToReadyList>
 8002c86:	e001      	b.n	8002c8c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c8c:	697b      	ldr	r3, [r7, #20]
	}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b08c      	sub	sp, #48	; 0x30
 8002c9a:	af04      	add	r7, sp, #16
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 feb2 	bl	8003a14 <pvPortMalloc>
 8002cb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cb8:	2054      	movs	r0, #84	; 0x54
 8002cba:	f000 feab 	bl	8003a14 <pvPortMalloc>
 8002cbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ccc:	e005      	b.n	8002cda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f000 ff62 	bl	8003b98 <vPortFree>
 8002cd4:	e001      	b.n	8002cda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	9302      	str	r3, [sp, #8]
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f80e 	bl	8002d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d04:	69f8      	ldr	r0, [r7, #28]
 8002d06:	f000 f891 	bl	8002e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e002      	b.n	8002d16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d16:	69bb      	ldr	r3, [r7, #24]
	}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <prvInitialiseNewTask+0x46>
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e7fe      	b.n	8002d64 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e012      	b.n	8002d98 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	7819      	ldrb	r1, [r3, #0]
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3334      	adds	r3, #52	; 0x34
 8002d82:	460a      	mov	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d9e9      	bls.n	8002d72 <prvInitialiseNewTask+0x52>
 8002d9e:	e000      	b.n	8002da2 <prvInitialiseNewTask+0x82>
			{
				break;
 8002da0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002daa:	e003      	b.n	8002db4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d901      	bls.n	8002dbe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dba:	2306      	movs	r3, #6
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fe70 	bl	8002aba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	3318      	adds	r3, #24
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fe6b 	bl	8002aba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	f1c3 0207 	rsb	r2, r3, #7
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	69b8      	ldr	r0, [r7, #24]
 8002e0e:	f000 fbfd 	bl	800360c <pxPortInitialiseStack>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e34:	f000 fd12 	bl	800385c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <prvAddNewTaskToReadyList+0xb8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <prvAddNewTaskToReadyList+0xb8>)
 8002e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <prvAddNewTaskToReadyList+0xbc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e4a:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <prvAddNewTaskToReadyList+0xbc>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <prvAddNewTaskToReadyList+0xb8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d110      	bne.n	8002e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e58:	f000 fab8 	bl	80033cc <prvInitialiseTaskLists>
 8002e5c:	e00d      	b.n	8002e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <prvAddNewTaskToReadyList+0xc0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <prvAddNewTaskToReadyList+0xbc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d802      	bhi.n	8002e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <prvAddNewTaskToReadyList+0xbc>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <prvAddNewTaskToReadyList+0xc4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <prvAddNewTaskToReadyList+0xc4>)
 8002e82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <prvAddNewTaskToReadyList+0xc8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	4a18      	ldr	r2, [pc, #96]	; (8002ef4 <prvAddNewTaskToReadyList+0xc8>)
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <prvAddNewTaskToReadyList+0xcc>)
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7ff fe11 	bl	8002ad4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002eb2:	f000 fd01 	bl	80038b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <prvAddNewTaskToReadyList+0xc0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <prvAddNewTaskToReadyList+0xbc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <prvAddNewTaskToReadyList+0xd0>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000388 	.word	0x20000388
 8002ee8:	20000288 	.word	0x20000288
 8002eec:	20000394 	.word	0x20000394
 8002ef0:	200003a4 	.word	0x200003a4
 8002ef4:	20000390 	.word	0x20000390
 8002ef8:	2000028c 	.word	0x2000028c
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <vTaskDelay+0x60>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d009      	beq.n	8002f2e <vTaskDelay+0x2e>
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	e7fe      	b.n	8002f2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f2e:	f000 f879 	bl	8003024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f32:	2100      	movs	r1, #0
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb03 	bl	8003540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f3a:	f000 f881 	bl	8003040 <xTaskResumeAll>
 8002f3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <vTaskDelay+0x64>)
 8002f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200003b0 	.word	0x200003b0
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f76:	463a      	mov	r2, r7
 8002f78:	1d39      	adds	r1, r7, #4
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd faa6 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	9202      	str	r2, [sp, #8]
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	460a      	mov	r2, r1
 8002f96:	491d      	ldr	r1, [pc, #116]	; (800300c <vTaskStartScheduler+0xa4>)
 8002f98:	481d      	ldr	r0, [pc, #116]	; (8003010 <vTaskStartScheduler+0xa8>)
 8002f9a:	f7ff fe22 	bl	8002be2 <xTaskCreateStatic>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <vTaskStartScheduler+0xac>)
 8002fa2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <vTaskStartScheduler+0xac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fac:	2301      	movs	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e001      	b.n	8002fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <vTaskStartScheduler+0x80>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <vTaskStartScheduler+0xb0>)
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <vTaskStartScheduler+0xb4>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <vTaskStartScheduler+0xb8>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fe2:	f000 fb9d 	bl	8003720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fe6:	e00d      	b.n	8003004 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d109      	bne.n	8003004 <vTaskStartScheduler+0x9c>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e7fe      	b.n	8003002 <vTaskStartScheduler+0x9a>
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	08003e7c 	.word	0x08003e7c
 8003010:	0800339d 	.word	0x0800339d
 8003014:	200003ac 	.word	0x200003ac
 8003018:	200003a8 	.word	0x200003a8
 800301c:	20000394 	.word	0x20000394
 8003020:	2000038c 	.word	0x2000038c

08003024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <vTaskSuspendAll+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <vTaskSuspendAll+0x18>)
 8003030:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	200003b0 	.word	0x200003b0

08003040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <xTaskResumeAll+0x114>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <xTaskResumeAll+0x2a>
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	e7fe      	b.n	8003068 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800306a:	f000 fbf7 	bl	800385c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <xTaskResumeAll+0x114>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3b01      	subs	r3, #1
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <xTaskResumeAll+0x114>)
 8003076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <xTaskResumeAll+0x114>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d161      	bne.n	8003144 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <xTaskResumeAll+0x118>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05d      	beq.n	8003144 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003088:	e02e      	b.n	80030e8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <xTaskResumeAll+0x11c>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3318      	adds	r3, #24
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fd79 	bl	8002b8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3304      	adds	r3, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd74 	bl	8002b8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <xTaskResumeAll+0x120>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <xTaskResumeAll+0x120>)
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <xTaskResumeAll+0x124>)
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7ff fd00 	bl	8002ad4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <xTaskResumeAll+0x128>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <xTaskResumeAll+0x12c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <xTaskResumeAll+0x11c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1cc      	bne.n	800308a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030f6:	f000 fa03 	bl	8003500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <xTaskResumeAll+0x130>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003106:	f000 f837 	bl	8003178 <xTaskIncrementTick>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <xTaskResumeAll+0x12c>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3b01      	subs	r3, #1
 800311a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f1      	bne.n	8003106 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <xTaskResumeAll+0x130>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <xTaskResumeAll+0x12c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <xTaskResumeAll+0x134>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003144:	f000 fbb8 	bl	80038b8 <vPortExitCritical>

	return xAlreadyYielded;
 8003148:	68bb      	ldr	r3, [r7, #8]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003b0 	.word	0x200003b0
 8003158:	20000388 	.word	0x20000388
 800315c:	20000348 	.word	0x20000348
 8003160:	20000390 	.word	0x20000390
 8003164:	2000028c 	.word	0x2000028c
 8003168:	20000288 	.word	0x20000288
 800316c:	2000039c 	.word	0x2000039c
 8003170:	20000398 	.word	0x20000398
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003182:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <xTaskIncrementTick+0x144>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8087 	bne.w	800329a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800318c:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <xTaskIncrementTick+0x148>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003194:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <xTaskIncrementTick+0x148>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d11f      	bne.n	80031e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <xTaskIncrementTick+0x14c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <xTaskIncrementTick+0x46>
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	e7fe      	b.n	80031bc <xTaskIncrementTick+0x44>
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <xTaskIncrementTick+0x14c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <xTaskIncrementTick+0x150>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3e      	ldr	r2, [pc, #248]	; (80032c4 <xTaskIncrementTick+0x14c>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4a3e      	ldr	r2, [pc, #248]	; (80032c8 <xTaskIncrementTick+0x150>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <xTaskIncrementTick+0x154>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4a3c      	ldr	r2, [pc, #240]	; (80032cc <xTaskIncrementTick+0x154>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	f000 f990 	bl	8003500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <xTaskIncrementTick+0x158>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d348      	bcc.n	800327c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <xTaskIncrementTick+0x14c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <xTaskIncrementTick+0x158>)
 80031f6:	f04f 32ff 	mov.w	r2, #4294967295
 80031fa:	601a      	str	r2, [r3, #0]
					break;
 80031fc:	e03e      	b.n	800327c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <xTaskIncrementTick+0x14c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	d203      	bcs.n	800321e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003216:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <xTaskIncrementTick+0x158>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800321c:	e02e      	b.n	800327c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3304      	adds	r3, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fcb3 	bl	8002b8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	3318      	adds	r3, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fcaa 	bl	8002b8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <xTaskIncrementTick+0x15c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <xTaskIncrementTick+0x15c>)
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <xTaskIncrementTick+0x160>)
 800325a:	441a      	add	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f7ff fc36 	bl	8002ad4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <xTaskIncrementTick+0x164>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	429a      	cmp	r2, r3
 8003274:	d3b9      	bcc.n	80031ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003276:	2301      	movs	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800327a:	e7b6      	b.n	80031ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <xTaskIncrementTick+0x164>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	4915      	ldr	r1, [pc, #84]	; (80032d8 <xTaskIncrementTick+0x160>)
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d907      	bls.n	80032a4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e004      	b.n	80032a4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <xTaskIncrementTick+0x168>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <xTaskIncrementTick+0x168>)
 80032a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <xTaskIncrementTick+0x16c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032b0:	697b      	ldr	r3, [r7, #20]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200003b0 	.word	0x200003b0
 80032c0:	2000038c 	.word	0x2000038c
 80032c4:	20000340 	.word	0x20000340
 80032c8:	20000344 	.word	0x20000344
 80032cc:	200003a0 	.word	0x200003a0
 80032d0:	200003a8 	.word	0x200003a8
 80032d4:	20000390 	.word	0x20000390
 80032d8:	2000028c 	.word	0x2000028c
 80032dc:	20000288 	.word	0x20000288
 80032e0:	20000398 	.word	0x20000398
 80032e4:	2000039c 	.word	0x2000039c

080032e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <vTaskSwitchContext+0xa0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <vTaskSwitchContext+0xa4>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032fc:	e03e      	b.n	800337c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80032fe:	4b23      	ldr	r3, [pc, #140]	; (800338c <vTaskSwitchContext+0xa4>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <vTaskSwitchContext+0xa8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	f1c3 031f 	rsb	r3, r3, #31
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	491e      	ldr	r1, [pc, #120]	; (8003394 <vTaskSwitchContext+0xac>)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <vTaskSwitchContext+0x5a>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e7fe      	b.n	8003340 <vTaskSwitchContext+0x58>
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <vTaskSwitchContext+0xac>)
 800334e:	4413      	add	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3308      	adds	r3, #8
 8003364:	429a      	cmp	r2, r3
 8003366:	d104      	bne.n	8003372 <vTaskSwitchContext+0x8a>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <vTaskSwitchContext+0xb0>)
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	200003b0 	.word	0x200003b0
 800338c:	2000039c 	.word	0x2000039c
 8003390:	20000390 	.word	0x20000390
 8003394:	2000028c 	.word	0x2000028c
 8003398:	20000288 	.word	0x20000288

0800339c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033a4:	f000 f852 	bl	800344c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <prvIdleTask+0x28>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d9f9      	bls.n	80033a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <prvIdleTask+0x2c>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033c0:	e7f0      	b.n	80033a4 <prvIdleTask+0x8>
 80033c2:	bf00      	nop
 80033c4:	2000028c 	.word	0x2000028c
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	e00c      	b.n	80033f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <prvInitialiseTaskLists+0x60>)
 80033e4:	4413      	add	r3, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fb47 	bl	8002a7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3301      	adds	r3, #1
 80033f0:	607b      	str	r3, [r7, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d9ef      	bls.n	80033d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033f8:	480d      	ldr	r0, [pc, #52]	; (8003430 <prvInitialiseTaskLists+0x64>)
 80033fa:	f7ff fb3e 	bl	8002a7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033fe:	480d      	ldr	r0, [pc, #52]	; (8003434 <prvInitialiseTaskLists+0x68>)
 8003400:	f7ff fb3b 	bl	8002a7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <prvInitialiseTaskLists+0x6c>)
 8003406:	f7ff fb38 	bl	8002a7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800340a:	480c      	ldr	r0, [pc, #48]	; (800343c <prvInitialiseTaskLists+0x70>)
 800340c:	f7ff fb35 	bl	8002a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <prvInitialiseTaskLists+0x74>)
 8003412:	f7ff fb32 	bl	8002a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <prvInitialiseTaskLists+0x78>)
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <prvInitialiseTaskLists+0x64>)
 800341a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <prvInitialiseTaskLists+0x7c>)
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <prvInitialiseTaskLists+0x68>)
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000028c 	.word	0x2000028c
 8003430:	20000318 	.word	0x20000318
 8003434:	2000032c 	.word	0x2000032c
 8003438:	20000348 	.word	0x20000348
 800343c:	2000035c 	.word	0x2000035c
 8003440:	20000374 	.word	0x20000374
 8003444:	20000340 	.word	0x20000340
 8003448:	20000344 	.word	0x20000344

0800344c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003452:	e019      	b.n	8003488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003454:	f000 fa02 	bl	800385c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <prvCheckTasksWaitingTermination+0x4c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb92 	bl	8002b8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <prvCheckTasksWaitingTermination+0x50>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3b01      	subs	r3, #1
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <prvCheckTasksWaitingTermination+0x50>)
 8003472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <prvCheckTasksWaitingTermination+0x54>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <prvCheckTasksWaitingTermination+0x54>)
 800347c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800347e:	f000 fa1b 	bl	80038b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f80e 	bl	80034a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <prvCheckTasksWaitingTermination+0x54>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e1      	bne.n	8003454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000035c 	.word	0x2000035c
 800349c:	20000388 	.word	0x20000388
 80034a0:	20000370 	.word	0x20000370

080034a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d108      	bne.n	80034c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fb6c 	bl	8003b98 <vPortFree>
				vPortFree( pxTCB );
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fb69 	bl	8003b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034c6:	e017      	b.n	80034f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d103      	bne.n	80034da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fb60 	bl	8003b98 <vPortFree>
	}
 80034d8:	e00e      	b.n	80034f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d009      	beq.n	80034f8 <prvDeleteTCB+0x54>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e7fe      	b.n	80034f6 <prvDeleteTCB+0x52>
	}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <prvResetNextTaskUnblockTime+0x38>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvResetNextTaskUnblockTime+0x3c>)
 8003512:	f04f 32ff 	mov.w	r2, #4294967295
 8003516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003518:	e008      	b.n	800352c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <prvResetNextTaskUnblockTime+0x38>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <prvResetNextTaskUnblockTime+0x3c>)
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	20000340 	.word	0x20000340
 800353c:	200003a8 	.word	0x200003a8

08003540 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800354a:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fb19 	bl	8002b8e <uxListRemove>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4013      	ands	r3, r2
 8003576:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d10a      	bne.n	8003598 <prvAddCurrentTaskToDelayedList+0x58>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	481a      	ldr	r0, [pc, #104]	; (80035fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003592:	f7ff fa9f 	bl	8002ad4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003596:	e026      	b.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d209      	bcs.n	80035c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7ff faad 	bl	8002b1c <vListInsert>
}
 80035c2:	e010      	b.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7ff faa3 	bl	8002b1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d202      	bcs.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6013      	str	r3, [r2, #0]
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000038c 	.word	0x2000038c
 80035f4:	20000288 	.word	0x20000288
 80035f8:	20000390 	.word	0x20000390
 80035fc:	20000374 	.word	0x20000374
 8003600:	20000344 	.word	0x20000344
 8003604:	20000340 	.word	0x20000340
 8003608:	200003a8 	.word	0x200003a8

0800360c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b04      	subs	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b04      	subs	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3b04      	subs	r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <pxPortInitialiseStack+0x64>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b14      	subs	r3, #20
 8003646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b04      	subs	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f06f 0202 	mvn.w	r2, #2
 800365a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b20      	subs	r3, #32
 8003660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	08003675 	.word	0x08003675

08003674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <prvTaskExitError+0x50>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d009      	beq.n	800369c <prvTaskExitError+0x28>
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e7fe      	b.n	800369a <prvTaskExitError+0x26>
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036ae:	bf00      	nop
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0fc      	beq.n	80036b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000010 	.word	0x20000010
	...

080036d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <pxCurrentTCBConst2>)
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	6808      	ldr	r0, [r1, #0]
 80036d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	f380 8809 	msr	PSP, r0
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f380 8811 	msr	BASEPRI, r0
 80036ea:	4770      	bx	lr
 80036ec:	f3af 8000 	nop.w

080036f0 <pxCurrentTCBConst2>:
 80036f0:	20000288 	.word	0x20000288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop

080036f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80036f8:	4808      	ldr	r0, [pc, #32]	; (800371c <prvPortStartFirstTask+0x24>)
 80036fa:	6800      	ldr	r0, [r0, #0]
 80036fc:	6800      	ldr	r0, [r0, #0]
 80036fe:	f380 8808 	msr	MSP, r0
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f380 8814 	msr	CONTROL, r0
 800370a:	b662      	cpsie	i
 800370c:	b661      	cpsie	f
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	df00      	svc	0
 8003718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800371a:	bf00      	nop
 800371c:	e000ed08 	.word	0xe000ed08

08003720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003726:	4b44      	ldr	r3, [pc, #272]	; (8003838 <xPortStartScheduler+0x118>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <xPortStartScheduler+0x11c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d109      	bne.n	8003744 <xPortStartScheduler+0x24>
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e7fe      	b.n	8003742 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <xPortStartScheduler+0x118>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <xPortStartScheduler+0x120>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d109      	bne.n	8003762 <xPortStartScheduler+0x42>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e7fe      	b.n	8003760 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <xPortStartScheduler+0x124>)
 8003764:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <xPortStartScheduler+0x128>)
 8003788:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <xPortStartScheduler+0x12c>)
 800378c:	2207      	movs	r2, #7
 800378e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003790:	e009      	b.n	80037a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <xPortStartScheduler+0x12c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a2c      	ldr	r2, [pc, #176]	; (800384c <xPortStartScheduler+0x12c>)
 800379a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d0ef      	beq.n	8003792 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <xPortStartScheduler+0x12c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d009      	beq.n	80037d2 <xPortStartScheduler+0xb2>
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e7fe      	b.n	80037d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <xPortStartScheduler+0x12c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <xPortStartScheduler+0x12c>)
 80037da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <xPortStartScheduler+0x12c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <xPortStartScheduler+0x12c>)
 80037e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <xPortStartScheduler+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a16      	ldr	r2, [pc, #88]	; (8003850 <xPortStartScheduler+0x130>)
 80037f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <xPortStartScheduler+0x130>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a13      	ldr	r2, [pc, #76]	; (8003850 <xPortStartScheduler+0x130>)
 8003802:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003806:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003808:	f000 f8d6 	bl	80039b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <xPortStartScheduler+0x134>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003812:	f000 f8f5 	bl	8003a00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <xPortStartScheduler+0x138>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <xPortStartScheduler+0x138>)
 800381c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003820:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003822:	f7ff ff69 	bl	80036f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003826:	f7ff fd5f 	bl	80032e8 <vTaskSwitchContext>
	prvTaskExitError();
 800382a:	f7ff ff23 	bl	8003674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	410fc271 	.word	0x410fc271
 8003840:	410fc270 	.word	0x410fc270
 8003844:	e000e400 	.word	0xe000e400
 8003848:	200003b4 	.word	0x200003b4
 800384c:	200003b8 	.word	0x200003b8
 8003850:	e000ed20 	.word	0xe000ed20
 8003854:	20000010 	.word	0x20000010
 8003858:	e000ef34 	.word	0xe000ef34

0800385c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <vPortEnterCritical+0x54>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <vPortEnterCritical+0x54>)
 800387c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <vPortEnterCritical+0x54>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <vPortEnterCritical+0x58>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <vPortEnterCritical+0x48>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	e7fe      	b.n	80038a2 <vPortEnterCritical+0x46>
	}
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000010 	.word	0x20000010
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <vPortExitCritical+0x4c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <vPortExitCritical+0x22>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	607b      	str	r3, [r7, #4]
 80038d8:	e7fe      	b.n	80038d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <vPortExitCritical+0x4c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	4a08      	ldr	r2, [pc, #32]	; (8003904 <vPortExitCritical+0x4c>)
 80038e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <vPortExitCritical+0x4c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <vPortExitCritical+0x3e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000010 	.word	0x20000010
	...

08003910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003910:	f3ef 8009 	mrs	r0, PSP
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <pxCurrentTCBConst>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	f01e 0f10 	tst.w	lr, #16
 8003920:	bf08      	it	eq
 8003922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392a:	6010      	str	r0, [r2, #0]
 800392c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003934:	f380 8811 	msr	BASEPRI, r0
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f7ff fcd2 	bl	80032e8 <vTaskSwitchContext>
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	f380 8811 	msr	BASEPRI, r0
 800394c:	bc09      	pop	{r0, r3}
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	6808      	ldr	r0, [r1, #0]
 8003952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003956:	f01e 0f10 	tst.w	lr, #16
 800395a:	bf08      	it	eq
 800395c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003960:	f380 8809 	msr	PSP, r0
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst>:
 8003970:	20000288 	.word	0x20000288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003990:	f7ff fbf2 	bl	8003178 <xTaskIncrementTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <SysTick_Handler+0x3c>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <vPortSetupTimerInterrupt+0x34>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <vPortSetupTimerInterrupt+0x38>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <vPortSetupTimerInterrupt+0x3c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <vPortSetupTimerInterrupt+0x40>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <vPortSetupTimerInterrupt+0x44>)
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <vPortSetupTimerInterrupt+0x34>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010
 80039f0:	e000e018 	.word	0xe000e018
 80039f4:	20000004 	.word	0x20000004
 80039f8:	10624dd3 	.word	0x10624dd3
 80039fc:	e000e014 	.word	0xe000e014

08003a00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a10 <vPortEnableVFP+0x10>
 8003a04:	6801      	ldr	r1, [r0, #0]
 8003a06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a0a:	6001      	str	r1, [r0, #0]
 8003a0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a0e:	bf00      	nop
 8003a10:	e000ed88 	.word	0xe000ed88

08003a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a20:	f7ff fb00 	bl	8003024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a24:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <pvPortMalloc+0x170>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a2c:	f000 f90c 	bl	8003c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a30:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <pvPortMalloc+0x174>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 808c 	bne.w	8003b56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003a44:	2208      	movs	r2, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <pvPortMalloc+0x6a>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e7fe      	b.n	8003a7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d068      	beq.n	8003b56 <pvPortMalloc+0x142>
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <pvPortMalloc+0x178>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d863      	bhi.n	8003b56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a8e:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <pvPortMalloc+0x17c>)
 8003a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <pvPortMalloc+0x17c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a98:	e004      	b.n	8003aa4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d903      	bls.n	8003ab6 <pvPortMalloc+0xa2>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f1      	bne.n	8003a9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <pvPortMalloc+0x170>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d04a      	beq.n	8003b56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4413      	add	r3, r2
 8003ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	2308      	movs	r3, #8
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d91e      	bls.n	8003b20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <pvPortMalloc+0xf4>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e7fe      	b.n	8003b06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b1a:	69b8      	ldr	r0, [r7, #24]
 8003b1c:	f000 f8f6 	bl	8003d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <pvPortMalloc+0x178>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <pvPortMalloc+0x178>)
 8003b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <pvPortMalloc+0x178>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <pvPortMalloc+0x180>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d203      	bcs.n	8003b42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <pvPortMalloc+0x178>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <pvPortMalloc+0x180>)
 8003b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <pvPortMalloc+0x174>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b56:	f7ff fa73 	bl	8003040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <pvPortMalloc+0x164>
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e7fe      	b.n	8003b76 <pvPortMalloc+0x162>
	return pvReturn;
 8003b78:	69fb      	ldr	r3, [r7, #28]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	; 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20003fc4 	.word	0x20003fc4
 8003b88:	20003fd0 	.word	0x20003fd0
 8003b8c:	20003fc8 	.word	0x20003fc8
 8003b90:	20003fbc 	.word	0x20003fbc
 8003b94:	20003fcc 	.word	0x20003fcc

08003b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d046      	beq.n	8003c38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003baa:	2308      	movs	r3, #8
 8003bac:	425b      	negs	r3, r3
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <vPortFree+0xa8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <vPortFree+0x42>
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e7fe      	b.n	8003bd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <vPortFree+0x5e>
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e7fe      	b.n	8003bf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <vPortFree+0xa8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d019      	beq.n	8003c38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d115      	bne.n	8003c38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <vPortFree+0xa8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c1c:	f7ff fa02 	bl	8003024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <vPortFree+0xac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <vPortFree+0xac>)
 8003c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	f000 f86c 	bl	8003d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c34:	f7ff fa04 	bl	8003040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c38:	bf00      	nop
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20003fd0 	.word	0x20003fd0
 8003c44:	20003fc8 	.word	0x20003fc8

08003c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <prvHeapInit+0xac>)
 8003c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3307      	adds	r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0307 	bic.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <prvHeapInit+0xac>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <prvHeapInit+0xb0>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <prvHeapInit+0xb0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c94:	2208      	movs	r2, #8
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <prvHeapInit+0xb4>)
 8003ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <prvHeapInit+0xb4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <prvHeapInit+0xb4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <prvHeapInit+0xb4>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <prvHeapInit+0xb8>)
 8003cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <prvHeapInit+0xbc>)
 8003cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <prvHeapInit+0xc0>)
 8003ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	200003bc 	.word	0x200003bc
 8003cf8:	20003fbc 	.word	0x20003fbc
 8003cfc:	20003fc4 	.word	0x20003fc4
 8003d00:	20003fcc 	.word	0x20003fcc
 8003d04:	20003fc8 	.word	0x20003fc8
 8003d08:	20003fd0 	.word	0x20003fd0

08003d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <prvInsertBlockIntoFreeList+0xac>)
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e002      	b.n	8003d20 <prvInsertBlockIntoFreeList+0x14>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d8f7      	bhi.n	8003d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d108      	bne.n	8003d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	441a      	add	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d118      	bne.n	8003d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <prvInsertBlockIntoFreeList+0xb0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d00d      	beq.n	8003d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e008      	b.n	8003d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <prvInsertBlockIntoFreeList+0xb0>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e003      	b.n	8003d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d002      	beq.n	8003daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20003fbc 	.word	0x20003fbc
 8003dbc:	20003fc4 	.word	0x20003fc4

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4e0d      	ldr	r6, [pc, #52]	; (8003df8 <__libc_init_array+0x38>)
 8003dc4:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc6:	1ba4      	subs	r4, r4, r6
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	2500      	movs	r5, #0
 8003dcc:	42a5      	cmp	r5, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	4e0b      	ldr	r6, [pc, #44]	; (8003e00 <__libc_init_array+0x40>)
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <__libc_init_array+0x44>)
 8003dd4:	f000 f820 	bl	8003e18 <_init>
 8003dd8:	1ba4      	subs	r4, r4, r6
 8003dda:	10a4      	asrs	r4, r4, #2
 8003ddc:	2500      	movs	r5, #0
 8003dde:	42a5      	cmp	r5, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de8:	4798      	blx	r3
 8003dea:	3501      	adds	r5, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003df2:	4798      	blx	r3
 8003df4:	3501      	adds	r5, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08003ea4 	.word	0x08003ea4
 8003dfc:	08003ea4 	.word	0x08003ea4
 8003e00:	08003ea4 	.word	0x08003ea4
 8003e04:	08003ea8 	.word	0x08003ea8

08003e08 <memset>:
 8003e08:	4402      	add	r2, r0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d100      	bne.n	8003e12 <memset+0xa>
 8003e10:	4770      	bx	lr
 8003e12:	f803 1b01 	strb.w	r1, [r3], #1
 8003e16:	e7f9      	b.n	8003e0c <memset+0x4>

08003e18 <_init>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	bf00      	nop
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr

08003e24 <_fini>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr
